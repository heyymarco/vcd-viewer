.main {
    // variables:
    --col-main-backg: black;
    --col-main-foreg: white;
    --col-toolbar-border: #ddddddcc;
    --col-handler: currentColor;
    --col-handler-active: #75BEFF;
    --col-wave-primary: #B5CEA8;
    --col-wave-error: #F48771;
    // --col-wave-selection: #ddddddcc;
    --col-wave-selection: var(--col-ctrl-ring);
    --col-wave-selection-range: #75BEFF88;
    --col-ctrl-active: #75BEFF88;
    --col-ctrl-forg: white;
    --col-ctrl-border: transparent;
    --col-ctrl-hover: #ffffff44;
    --col-ctrl-border-active: #0088ff;
    --col-ctrl-ring: #0088ff;
    --col-input-backg: #ffffff22;
    --ctrl-padding: 2px;
    --ctrl-border-radius: 4px;
    --variable-height: 22px;
    --variable-gap   : 6px;
    
    
    
    // layouts:
    display: grid;
    
    
    
    // backgrounds:
    background-color: var(--col-main-backg);
    
    
    
    // foregrounds:
    color: var(--col-main-foreg);
    
    
    
    // typos:
    font-family: monospace;
    font-size: 12px;
    font-weight: 600;
}
.toolbar {
    // layouts:
    display: grid;
    grid-auto-flow: column;
    justify-content: start;
    align-items: center;
    
    
    
    // spacings:
    gap: 10px;
    padding: 10px;
    
    
    
    // borders:
    border-block-end: solid 1px var(--col-toolbar-border);
    
    
    
    // children:
    & button {
        // appearances:
        appearance: none;
        display: grid;
        
        
        
        // accessibilities:
        cursor: pointer;
        
        
        
        // icons:
        &:not([class ~= "text"])::before {
            content: "";
            display: inline-block;
            
            
            
            // sizes:
            box-sizing: border-box;
            inline-size: 24px;
            block-size: 24px;
            
            
            
            // appearances:
            background-color: var(--col-ctrl-forg);
            -webkit-mask-repeat: no-repeat;
            -webkit-mask-size: contain;
            mask-repeat: no-repeat;
            mask-size: contain;
        }
        &[class ~= "zoom-out"       ]::before { -webkit-mask-image: url(./assets/zoom-out.svg);        mask-image: url(./assets/zoom-out.svg);        }
        &[class ~= "zoom-in"        ]::before { -webkit-mask-image: url(./assets/zoom-in.svg);         mask-image: url(./assets/zoom-in.svg);         }
        &[class ~= "prev-neg-edge"  ]::before { -webkit-mask-image: url(./assets/prev-neg-edge.svg);   mask-image: url(./assets/prev-neg-edge.svg);   }
        &[class ~= "prev-pos-edge"  ]::before { -webkit-mask-image: url(./assets/prev-pos-edge.svg);   mask-image: url(./assets/prev-pos-edge.svg);   }
        &[class ~= "prev-transition"]::before { -webkit-mask-image: url(./assets/prev-transition.svg); mask-image: url(./assets/prev-transition.svg); }
        &[class ~= "next-transition"]::before { -webkit-mask-image: url(./assets/next-transition.svg); mask-image: url(./assets/next-transition.svg); }
        &[class ~= "next-neg-edge"  ]::before { -webkit-mask-image: url(./assets/next-neg-edge.svg);   mask-image: url(./assets/next-neg-edge.svg);   }
        &[class ~= "next-pos-edge"  ]::before { -webkit-mask-image: url(./assets/next-pos-edge.svg);   mask-image: url(./assets/next-pos-edge.svg);   }
        &[class ~= "prev"           ]::before { -webkit-mask-image: url(./assets/prev.svg);            mask-image: url(./assets/prev.svg);            }
        &[class ~= "next"           ]::before { -webkit-mask-image: url(./assets/next.svg);            mask-image: url(./assets/next.svg);            }
        &[class ~= "touch"          ]::before { -webkit-mask-image: url(./assets/touch.svg);           mask-image: url(./assets/touch.svg);           }
        
        
        
        // foregrounds:
        color: var(--col-ctrl-forg);
        
        
        
        // backgrounds:
        background: transparent;
        &[class ~= "active"] {
            background-color: var(--col-ctrl-active);
        }
        &:hover:not(:is([class ~= "active"], :disabled)) {
            background-color: var(--col-ctrl-hover);
        }
        
        
        
        // borders:
        border: solid 1px var(--col-ctrl-border);
        border-radius: var(--ctrl-border-radius);
        &[class ~= "active"] {
            border-color: var(--col-ctrl-border-active);
        }
        
        
        
        // animations:
        transition:
            background-color 300ms,
            box-shadow       300ms;
        
        
        
        // spacings:
        padding: var(--ctrl-padding);
        
        
        
        // states:
        &:is(:focus, :focus-visible) {
            outline: unset;
            outline-offset: unset;
        }
        &:focus-visible {
            box-shadow: 0 0 0 2px var(--col-ctrl-ring);
        }
        &:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    }
}
.comboInput {
    // layout:
    display: grid;
    grid-auto-flow: column;
    
    
    // backgrounds:
    background-color: var(--col-input-backg);
    
    
    
    // borders:
    border: solid 1px var(--col-ctrl-border);
    border-radius: var(--ctrl-border-radius);
    
    
    
    // spacings:
    gap: 4px;
    padding: var(--ctrl-padding);
    
    
    
    // animations:
    transition:
        background-color 300ms,
        box-shadow       300ms;
    
    
    
    // children:
    &>input {
        // layouts:
        appearance: none;
        
        
        
        // sizes:
        inline-size: 150px;
        block-size: auto;
        
        
        
        // foreground:
        color: inherit;
        
        
        
        // backgrounds:
        background: none;
        
        
        
        // borders:
        border: none;
        
        
        
        // spacings:
        padding: 0;
        
        
        
        // states:
        &:is(:focus, :focus-visible) {
            outline: unset;
            outline-offset: unset;
        }
    }
    
    
    
    // states:
    &:has(:focus-visible) {
        box-shadow: 0 0 0 2px var(--col-ctrl-ring);
    }
}
.bodyOuter {
    // layouts:
    display: grid;
    grid-template:
        "labels values body" max-content
        /
        min-content 12ch 1fr;
}
.labels {
    // layouts:
    display: grid;
    align-content: end;
    
    list-style-type: none;
    
    
    
    // sizes:
    // overflow-x : scroll; // hides, use `.scrollbarHack` instead
    // overflow-y : hidden; // hides, use `.scrollbarHack` instead
    // scrollbar-gutter: stable both-edges;
    
    
    
    // spacings:
    // row-gap: var(--variable-gap); // moved to `.labelWrapper` spacings
    padding-inline: 10px;
    padding-block: 10px;
    margin: unset;
}
.labelWrapper {
    // layouts:
    display: grid;
    
    
    
    // spacings:
    &:not(:first-child) {
        margin-block-start: var(--variable-gap);
    }
}
.label {
    // layouts:
    display: grid;
    grid-template:
        "handler label" 1fr
        /
        min-content 1fr;
    align-items: center;
    
    
    
    // sizes:
    block-size: var(--variable-height);
    
    
    
    // spacings:
    gap: 6px;
    
    
    
    // typos:
    text-align: end;
    
    
    
    // states:
    &[class ~= "dragging"] {
        position: relative;
        left : calc((var(--posX) * 1px));
        top  : calc((var(--posY) * 1px) - (var(--moveRelative, 0) * (var(--variable-height) + var(--variable-gap))));
        // cursor: move;
    }
    &[class ~= "dropZone"] {
        &:hover {
            color: var(--col-handler-active);
        }
    }
}
.labelItemHandler {
    // positions:
    align-self: stretch;
    
    
    
    // layouts:
    display: grid;
    align-content: center;
    
    
    
    // sizes:
    min-inline-size: 16px;
    
    
    
    // accessibilities:
    touch-action: pinch-zoom;      // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_drag_n_drop_implementation vs native_page_scroll_by_touch
    & * {
        touch-action: pinch-zoom;  // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_drag_n_drop_implementation vs native_page_scroll_by_touch
    }
    -webkit-user-select: none;     // prevents native_select_implementation, avoids user confusion between custom_drag_n_drop_implementation vs native_select_implementation
    user-select: none;             // prevents native_select_implementation, avoids user confusion between custom_drag_n_drop_implementation vs native_select_implementation
    
    cursor: grab;
    &:active {
        cursor: grabbing;
    }
    
    
    
    // spacings:
    gap: 3px;
    
    
    
    // children:
    &::before, &::after {
        content: "";
        border-top: solid 2px var(--col-handler);
        transition:
            border-top 300ms;
    }
    &:hover {
        &::before, &::after {
            border-top-color: var(--col-handler-active);
        }
    }
}
.labelValue {
    // layouts:
    display: grid;
    grid-auto-flow: column;
    justify-content: end;
    align-items: center;
    
    
    
    // sizes:
    block-size: var(--variable-height);
    overflow: hidden;
    
    
    
    // typos:
    text-align: end;
    text-overflow: ellipsis;
    
    
    
    // states:
    &[class ~= "dragging"] {
        position: relative;
        left : calc((var(--posX) * 1px));
        top  : calc((var(--posY) * 1px) - (var(--moveRelative, 0) * (var(--variable-height) + var(--variable-gap))));
    }
}
.scrollbarHack {
    // appearances:
    visibility: hidden;
    
    
    
    // accessibilities:
    pointer-events: none;
    
    
    
    // sizes:
    box-sizing: content-box;
    // block-size: 0.02px;
    overflow-x : scroll;
    overflow-y : hidden;
    
    
    
    // spacings:
    margin: 0;
    padding: 0;
}

.body {
    // positions:
    grid-area: body;
    position: relative;
    
    
    
    // layouts:
    display: grid;
    grid-template:
        "ruler" min-content
        /
        1fr;
    grid-auto-flow: row;
    grid-auto-rows: max-content;
    justify-items: stretch;
    
    
    
    // sizes:
    overflow-x : scroll;
    overflow-y : hidden;
    // scrollbar-gutter: stable both-edges;
    
    
    
    // spacings:
    row-gap: 6px;
    padding-block: 10px;
}

.ruler {
    // positions:
    grid-area: ruler;
    
    
    
    // sizes:
    block-size: 30px;
    overflow: visible;
}

.variables {
    // layouts:
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: max-content;
    justify-items: stretch;
    
    
    
    // accessibilities:
    touch-action: pinch-zoom;      // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_scroll_implementation vs custom_select_implementation vs native_page_scroll_by_touch
    & * {
        touch-action: pinch-zoom;  // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_scroll_implementation vs custom_select_implementation vs native_page_scroll_by_touch
    }
    -webkit-user-select: none;     // prevents native_select_implementation, avoids user confusion between custom_select_implementation vs native_select_implementation
    user-select: none;             // prevents native_select_implementation, avoids user confusion between custom_select_implementation vs native_select_implementation
    
    
    
    // spacings:
    row-gap: var(--variable-gap);
}
.variableWrapper {
    // layouts:
    display: grid;
}
.variable {
    // layouts:
    display: grid;
    grid-auto-flow: column;
    grid-template:
        "waves lastWave" auto
        /
        max-content auto;
    
    
    
    // sizes:
    block-size: var(--variable-height);
    
    
    
    // spacings:
    padding-block : 2px; // a padding for boxShadow
    margin-block  : -2px; // a size compensation of boxShadow's padding
    
    
    
    // states:
    transition:
        box-shadow 300ms;
    &:is(:focus, [class ~= "focus"]) {
        box-shadow: 0 0 0 2px var(--col-wave-selection);
    }
    &:is(:focus, :focus-visible) {
        outline: unset;
        outline-offset: unset;
    }
    
    &[class ~= "dragging"] {
        position: relative;
        left : calc((var(--posX) * 1px));
        top  : calc((var(--posY) * 1px) - (var(--moveRelative, 0) * (var(--variable-height) + var(--variable-gap))));
    }
}

@mixin waveLayout {
    // layouts:
    display: grid;
    align-items: center;
    
    
    
    // sizes:
    box-sizing: border-box;
    inline-size: calc(var(--length) * 1px);
    overflow: hidden; // hides overflowing text
    
    
    
    // backgrounds:
    background-color: var(--col-wave-primary);
    &[class ~= "error"] {
        background-color: var(--col-wave-error);
    }
    --hexaCrop: 2px;
    clip-path: polygon(var(--hexaCrop) 0%, calc(100% - var(--hexaCrop)) 0%, 100% 50%, calc(100% - var(--hexaCrop)) 100%, var(--hexaCrop) 100%, 0% 50%);
    &[class ~= "bin"] {
        clip-path: unset;
        border: solid 1px var(--col-wave-primary);
        // border-inline-width: 0.5px;
        &:not(:is([class ~= "error"], [class ~= "last"])) {
            background: transparent;
        }
        margin-inline: -0.5px;
        inline-size: calc((var(--length) * 1px) + 1px);
        &[class ~= "hi"] {
            border-bottom-width: 0;
        }
        &[class ~= "lo"] {
            border-top-width: 0;
        }
    }
    
    
    
    // typos:
    color: #1F1F1F;
    text-overflow: ellipsis;
    text-align: center;
}

.waves {
    // positions:
    grid-area: waves;
    
    
    
    // layouts:
    display: grid;
    grid-auto-flow: column;
    grid-template-columns: max-content;
    // justify-items: start;
    justify-content: start;
    
    
    
    // sizes:
    // overflow: hidden;
    
    
    
    // children:
    &>* {
        // layouts:
        @include waveLayout;
    }
}
.lastWave {
    // positions:
    grid-area: lastWave;
    
    
    
    // layouts:
    @include waveLayout;
    
    
    
    // sizes:
    min-inline-size: 40px;
    
    
    
    // backgrunds:
    background-color: var(--col-wave-error);
}

.selection {
    // positions:
    position: absolute;
    inset-block: 0;
    inset-inline-start: calc((var(--position) * 1px));
    
    
    
    // sizes:
    inline-size: 1px;
    
    
    
    // accessibilities:
    pointer-events: none; // a ghost element
    
    
    
    // borders:
    border-inline-start: dashed 1px currentColor;
    &[class ~= "alt"] {
        border-inline-start-color:  #FFD86D;
    }
}
.selectionRange {
    // positions:
    position: absolute;
    inset-block: 0;
    inset-inline-start: calc((var(--selStart) * 1px));
    
    
    
    // sizes:
    inline-size: calc((var(--selEnd) - var(--selStart)) * 1px);
    
    
    
    // accessibilities:
    pointer-events: none; // a ghost element
    
    
    
    // backgrounds:
    background-color: var(--col-wave-selection-range);
    
    
    
    // borders:
    // border-inline: solid 1px currentColor;
}