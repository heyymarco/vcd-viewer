.main {
    // variables:
    --col-handler: currentColor;
    --col-handler-active: #75BEFF;
    --col-wave-primary: #B5CEA8;
    --col-wave-error: #F48771;
    --col-wave-selection: #ddddddcc;
    --col-wave-selection-range: #75BEFF88;
    --col-btn-active: #75BEFF;
    --variable-height: 22px;
    --variable-gap   : 6px;
    
    
    
    // layouts:
    display: grid;
    
    
    
    // spacings:
    gap: 10px;
    
    
    
    // typos:
    color: white;
    font-family: monospace;
    font-size: 12px;
    font-weight: 600;
}
.toolbar {
    // layouts:
    display: grid;
    grid-auto-flow: column;
    justify-content: start;
    
    
    
    // spacings:
    gap: 10px;
    
    
    
    // children:
    &>button {
        appearance: none;
        &[class ~= "active"] {
            background-color: var(--col-btn-active);
        }
    }
}
.bodyOuter {
    // layouts:
    display: grid;
    grid-template:
        "labels body" max-content
        /
        min-content 1fr;
    
    
    
    // backgrounds:
    background-color: black;
}
.labels {
    // layouts:
    display: grid;
    align-content: end;
    
    list-style-type: none;
    
    
    
    // sizes:
    overflow-x : scroll;
    overflow-y : hidden;
    // scrollbar-gutter: stable both-edges;
    
    
    
    // spacings:
    row-gap: var(--variable-gap);
    padding-inline: 10px;
    padding-block: 10px;
    margin: unset;
}
.labelWrapper {
    // layouts:
    display: grid;
}
.label {
    // layouts:
    display: grid;
    grid-template:
        "handler label" 1fr
        /
        min-content 1fr;
    align-items: center;
    
    
    
    // sizes:
    block-size: var(--variable-height);
    
    
    
    // spacings:
    gap: 6px;
    
    
    
    // typos:
    text-align: end;
    
    
    
    // states:
    &[class ~= "dragging"] {
        position: relative;
        left : calc((var(--posX) * 1px));
        top  : calc((var(--posY) * 1px) - (var(--moveRelative, 0) * (var(--variable-height) + var(--variable-gap))));
        // cursor: move;
    }
    &[class ~= "dropZone"] {
        &:hover {
            color: var(--col-handler-active);
        }
    }
}
.labelItemHandler {
    // positions:
    align-self: stretch;
    
    
    
    // layouts:
    display: grid;
    align-content: center;
    
    
    
    // sizes:
    min-inline-size: 16px;
    
    
    
    // accessibilities:
    touch-action: pinch-zoom;      // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_drag_n_drop_implementation vs native_page_scroll_by_touch
    & * {
        touch-action: pinch-zoom;  // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_drag_n_drop_implementation vs native_page_scroll_by_touch
    }
    -webkit-user-select: none;     // prevents native_select_implementation, avoids user confusion between custom_drag_n_drop_implementation vs native_select_implementation
    user-select: none;             // prevents native_select_implementation, avoids user confusion between custom_drag_n_drop_implementation vs native_select_implementation
    
    cursor: grab;
    &:active {
        cursor: grabbing;
    }
    
    
    
    // spacings:
    gap: 3px;
    
    
    
    // children:
    &::before, &::after {
        content: "";
        border-top: solid 2px var(--col-handler);
        transition:
            border-top 300ms;
    }
    &:hover {
        &::before, &::after {
            border-top-color: var(--col-handler-active);
        }
    }
}

.body {
    // positions:
    grid-area: body;
    position: relative;
    
    
    
    // layouts:
    display: grid;
    grid-template:
        "ruler" min-content
        /
        1fr;
    grid-auto-flow: row;
    grid-auto-rows: max-content;
    justify-items: stretch;
    
    
    
    // sizes:
    overflow-x : scroll;
    overflow-y : hidden;
    // scrollbar-gutter: stable both-edges;
    
    
    
    // spacings:
    row-gap: 6px;
    padding-block: 10px;
}

.ruler {
    // positions:
    grid-area: ruler;
    
    
    
    // sizes:
    block-size: 30px;
    overflow: visible;
}

.variables {
    // layouts:
    display: grid;
    grid-auto-flow: row;
    grid-auto-rows: max-content;
    justify-items: stretch;
    
    
    
    // accessibilities:
    touch-action: pinch-zoom;      // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_scroll_implementation vs custom_select_implementation vs native_page_scroll_by_touch
    & * {
        touch-action: pinch-zoom;  // prevents native_page_scroll_by_touch, but allows to zoom_in/out, avoids user confusion between custom_scroll_implementation vs custom_select_implementation vs native_page_scroll_by_touch
    }
    -webkit-user-select: none;     // prevents native_select_implementation, avoids user confusion between custom_select_implementation vs native_select_implementation
    user-select: none;             // prevents native_select_implementation, avoids user confusion between custom_select_implementation vs native_select_implementation
    
    
    
    // spacings:
    row-gap: var(--variable-gap);
}
.variableWrapper {
    // layouts:
    display: grid;
}
.variable {
    // layouts:
    display: grid;
    grid-auto-flow: column;
    grid-template:
        "waves lastWave" auto
        /
        max-content auto;
    
    
    
    // sizes:
    block-size: var(--variable-height);
    
    
    
    // spacings:
    padding-block : 2px; // a padding for boxShadow
    margin-block  : -2px; // a size compensation of boxShadow's padding
    
    
    
    // states:
    transition:
        box-shadow 300ms;
    &:is(:focus, [class ~= "focus"]) {
        box-shadow: 0 0 0 2px var(--col-wave-selection);
    }
    
    &[class ~= "dragging"] {
        position: relative;
        left : calc((var(--posX) * 1px));
        top  : calc((var(--posY) * 1px) - (var(--moveRelative, 0) * (var(--variable-height) + var(--variable-gap))));
    }
}

@mixin waveLayout {
    // layouts:
    display: grid;
    align-items: center;
    
    
    
    // sizes:
    box-sizing: border-box;
    inline-size: calc(var(--length) * 1px);
    overflow: hidden; // hides overflowing text
    
    
    
    // backgrounds:
    background-color: var(--col-wave-primary);
    &[class ~= "error"] {
        background-color: var(--col-wave-error);
    }
    --hexaCrop: 2px;
    clip-path: polygon(var(--hexaCrop) 0%, calc(100% - var(--hexaCrop)) 0%, 100% 50%, calc(100% - var(--hexaCrop)) 100%, var(--hexaCrop) 100%, 0% 50%);
    &[class ~= "bin"] {
        clip-path: unset;
        border: solid 1px var(--col-wave-primary);
        // border-inline-width: 0.5px;
        &:not(:is([class ~= "error"], [class ~= "last"])) {
            background: transparent;
        }
        margin-inline: -0.5px;
        inline-size: calc((var(--length) * 1px) + 1px);
        &[class ~= "hi"] {
            border-bottom-width: 0;
        }
        &[class ~= "lo"] {
            border-top-width: 0;
        }
    }
    
    
    
    // typos:
    color: #1F1F1F;
    text-overflow: ellipsis;
    text-align: center;
}

.waves {
    // positions:
    grid-area: waves;
    
    
    
    // layouts:
    display: grid;
    grid-auto-flow: column;
    grid-template-columns: max-content;
    // justify-items: start;
    justify-content: start;
    
    
    
    // sizes:
    // overflow: hidden;
    
    
    
    // children:
    &>* {
        // layouts:
        @include waveLayout;
    }
}
.lastWave {
    // positions:
    grid-area: lastWave;
    
    
    
    // layouts:
    @include waveLayout;
    
    
    
    // sizes:
    min-inline-size: 40px;
    
    
    
    // backgrunds:
    background-color: var(--col-wave-error);
}

.selection {
    // positions:
    position: absolute;
    inset-block: 0;
    inset-inline-start: calc((var(--position) * 1px));
    
    
    
    // sizes:
    inline-size: 1px;
    
    
    
    // accessibilities:
    pointer-events: none; // a ghost element
    
    
    
    // borders:
    border-inline-start: dashed 1px currentColor;
    &[class ~= "alt"] {
        border-inline-start-color:  #FFD86D;
    }
}
.selectionRange {
    // positions:
    position: absolute;
    inset-block: 0;
    inset-inline-start: calc((var(--selStart) * 1px));
    
    
    
    // sizes:
    inline-size: calc((var(--selEnd) - var(--selStart)) * 1px);
    
    
    
    // accessibilities:
    pointer-events: none; // a ghost element
    
    
    
    // backgrounds:
    background-color: var(--col-wave-selection-range);
    
    
    
    // borders:
    // border-inline: solid 1px currentColor;
}